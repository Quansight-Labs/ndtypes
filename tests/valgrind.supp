#
# The flex-generated lexer handles some allocation errors with a fatal error.
# The fatal error still calls fprintf() before exiting.  We do the same as
# PostgreSQL and redefine fprintf() to a function that -- in our case -- calls
# longjmp().  The error is then handled in parser.c.
#
# With this scheme, blocks allocated by yy_scan_buffer() are still lost *if*
# an allocation failure is deliberately triggered within that function.
#
# IOW, this leak only occurs when tests/runtests is compiled with -DTEST_ALLOC
# and ndt_alloc_fail() is active.
#

#
# Suppressions with -O0 -g
#
{
   flex_inadequate_error_handling_dbg1
   Memcheck:Leak
   match-leak-kinds: indirect
   fun:malloc
   fun:ndt_alloc_fail
   fun:ndt_alloc
   fun:yyalloc
   fun:yy_scan_buffer
   fun:ndt_from_string
}

{
   flex_inadequate_error_handling_dbg2
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:ndt_alloc_fail
   fun:ndt_alloc
   fun:yyalloc
   fun:yy_scan_buffer
   fun:ndt_from_string
}

{
   flex_inadequate_error_handling_dbg3
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:ndt_alloc_fail
   fun:ndt_alloc
   fun:yyalloc
   fun:yy_scan_buffer
   fun:ndt_from_string
}

#
# Suppressions with -O2 -g
#
{
   flex_inadequate_error_handling_opt1
   Memcheck:Leak
   match-leak-kinds: indirect
   fun:malloc
   fun:yyalloc
   fun:yy_scan_buffer
   fun:ndt_from_string
}

{
   flex_inadequate_error_handling_opt2
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:yyalloc
   fun:yy_scan_buffer
   fun:ndt_from_string
}

{
   flex_inadequate_error_handling_opt3
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:yyalloc
   fun:yy_scan_buffer
   fun:ndt_from_string
}
