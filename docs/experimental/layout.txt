

This is a short document for showing the advantages/disadvantages of three
possible array layouts for libndtypes/libxnd.

The layout design question only concerns *ragged* arrays. Libndtypes also
has a first class separate ndarray type for maximum performance fixed-array
computations, which is not affected by this discussion.


# ===========================================================================
#              Pointer-based (Java, OCaml, ...) ragged arrays
# ===========================================================================

In many ways this is the easiest and most flexible representation. All
dimensions but the last one are arrays of pointers to the next dimension.

The last dimensions contain contiguous data and are the leaves of the
dimension tree.


Example
-------

  type: "2 * var(3,4) * float64"
  data: [[1.0, 2.0, 3.0],
         [4.0, 5.0, 6.0, 7.0]]


   [ptr,ptr] # fixed dim, shape 2: array of 2 pointers.
     |   |
     |   `-> [4,ptr] # var dim: shape 4, pointer to the data.
     |           |
     |           `-> [4.0,5.0,6.0,7.0]
     |
     `-> [3,ptr] # var dim, shape 3, pointer to the data.
             |
             `-> [1.0,2.0,3.0]



Advantages
----------

   - Extremely flexible. Suppose that arrays a=[1,2,...,1000000]
     and b=[-1,-2,...,-2000000] exist.  Perhaps they are columns
     that have already been extracted from a PostgreSQL data set.

     Now one can put these into a new typed array [a,b] without
     copying any data.

     It is always possible to build array trees bottom-up.

     Intuitively, it seems like the right thing for Blaze-like
     datasets.

   - Subarrays naturally return new array views with the correct type.
     This is very important for composing gufuncs.

        Example:   g : 10 * 2 * int -> 2 * int
                   f : 2 * int -> float64

        f(g(x)) is easy[1]: g returns an array view with the correct
        type and memory location so f can be applied directly without
        *any* adjustments to the type or the array.

        [1] in terms of typing ...

Disadvantages
-------------

    - Java and OCaml have state-of-the-art garbage collectors that
      make this sort of thing easier.  However, we're generally
      dealing with array views.

    - Pointers need to be adjusted when copying or storing arrays.


# ===========================================================================
#                          Offset-based ragged arrays
# ===========================================================================

Example ('None' means missing value or missing dimension):

   type: "3 * var(2,3,1) * ?var(2,2,3,0,1,2) * ?uint8"
   array: [[[0, 1], [2, 3]], [[4, 5, None], None, [7]], [[8, 9]]]
                                      |      |
                                      |      `---> missing dimension
                                      |
                                      `---> missing value


Shapes and contiguous data (run vararray.py)
--------------------------------------------

   ([[3], [2, 3, 1], [2, 2, 3, 0, 1, 2]], [0, 1, 2, 3, 4, 5, None, 7, 8, 9])


Offsets
-------

   ([0, 3], [0, 2, 5, 6], [0, 2, 4, 7, 7, 8, 10])

The offsets can be:

   a) Arrow compatible (int32_t)

   b) Space optimized -- if all values in the offset array fit in e.g. uint8_t,
      use uint8_t.  If uint64_t is needed, use that.


Array representation
--------------------

The array is internally represented by a tuple:

   (offsets1, offsets2, offsets3, data, bitmap1, bitmap2, bitmap3, bitmap4)

OR (cache optimized):

   (offsets1, bitmap1, offsets2, bitmap2, offsets3, bitmap3, data, bitmap4)


Bitmaps 1-3 are for validity bitmaps for missing dimensions, bitmap4 is
the validity bitmap for missing data.

If no data is missing, bitmaps in this example will have size zero.
For example, bitmap2 in the above example will have size zero, since
there are no missing second dimensions.


The entire tuple and its members (no pointers) are written to a single
char pointer: 


ptr = (0, 3, 0, 2, 5, 6, 0, 2, 4, 7, 7, 8, 10, 0, 1, 2, 3, 4, 5, Undefined, 7, 8, 9, bitmap1, bitmap2, bitmap3, bitmap4)
       ^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     offsets1 offsets2        offsets3                     data



nd_array_t
----------

The nd_array_t will look like this:

typedef struct {
    ndt_t type;
    char * const array; /* always points to the tuple that contains the top-level access information */
    int64_t cur;        /* current index of the dimension we're in, needed for accessing validity bitmaps */
    char *ptr;          /* points to a subarray or an individual value */
} nd_array_t;


Some of the elegance of the pointer representation is lost here, since the
array member of the struct is only needed for array types.


The pointer representation is a true "nd_memory_t" type that could seamlessly
represent a single "int64_t" that is not embedded in an array.

In this representation the array member would be NULL for a single "int64_t".



Subarrays
---------

Subarrays are taken in roughly the same way as in the pointer representation
above.


Example
-------

As above,

   a = [[[0, 1], [2, 3]], [[4, 5, None], None, [7]], [[8, 9]]]
   array = (0, 3, 0, 2, 5, 6, 0, 2, 4, 7, 7, 8, 10, 0, 1, 2, 3, 4, 5, Undefined, 7, 8, 9, bitmap1, bitmap2, bitmap3, bitmap4)
            |
            `--> initial location of 'ptr'


Take a[1]:

   array = (0, 3, 0, 2, 5, 6, 0, 2, 4, 7, 7, 8, 10, 0, 1, 2, 3, 4, 5, Undefined, 7, 8, 9, bitmap1, bitmap2, bitmap3, bitmap4)
                  |
                  `-> base offset of the second dimensions

       1) Determine the shape of the dimension we stride into:  3 - 0 = 3.

       2) Lookup the base offset of the second dimension in the top tuple type
          (tuple offsets are always stored in the type).

       3) Set a.ptr to &base[1]:

       4) set a.cur to 1.


   array = (0, 3, 0, 2, 5, 6, 0, 2, 4, 7, 7, 8, 10, 0, 1, 2, 3, 4, 5, Undefined, 7, 8, 9, bitmap1, bitmap2, bitmap3, bitmap4)
                     |
                     `-> &base[1]


        We are now at a new subarray with shape 5 - 2 = 3.


# ===========================================================================
#                 Ideal Offset-based ragged arrays (do they exist?)
# ===========================================================================

In the above example, use relative offsets:

   input: [[[0, 1], [2, 3]], [[4, 5, None], None, [7]], [[8, 9]]]

   array = (2, 4, 4, 5, 7, 7, 0, 2, 4, 7, 7, 8, 10, 0, 1, 2, 3, 4, 5, Undefined, 7, 8, 9, bitmap1, bitmap2, bitmap3, bitmap4)
            ^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^^
        offsets1  offsets2    offsets3

This would work for the first two dimensions, which now contain the direct
number of steps to move the 'ptr' forward when striding into the next
dimension. The shape is now encoded as offset[i+1] - offset[i] + 1.

But this only works for homogeneous arrays and breaks down for offsets3,
which have some steps as int64_t and the rest as uint8_t.

Also, the bitmaps still need to be addressed.



# ===========================================================================
#                              Python specific
# ===========================================================================

The luxury version in terms of memory management would be to use the
pointer based representation and make fixed-dim and var-dim Python objects.


Advantages
----------

    - Memory management problems go away.

    - Arrays are naturally composable like in the first example.

    - Probably decent performance *for large columns in the last dimension*.


Disadvantages
-------------

     - Python specific.

     - Would need at least an additional refcount field in all first
       dimension elements (but not in the last contiguous ones that
       contain the actual data).

     - Huge overhead for "1000000 * 2 * float64" type data.
