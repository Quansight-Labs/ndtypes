
This is a short document for showing the advantages/disadvantages of three
possible array layouts for libndtypes/libxnd.

The layout design question only concerns *ragged* arrays. Libndtypes also
has a first class separate ndarray type for maximum performance fixed-array
computations, which is not affected by this discussion.


# ===========================================================================
#              Pointer-based (Java, OCaml, ...) ragged arrays
# ===========================================================================

In many ways this is the easiest and most flexible representation. All
dimensions but the last one are arrays of pointers to the next dimension.

The last dimensions contain contiguous data and are the leaves of the
dimension tree.


Example
-------

  type: "2 * var(3,4) * float64"
  data: [[1.0, 2.0, 3.0],
         [4.0, 5.0, 6.0, 7.0]]


   [ptr,ptr] # fixed dim, shape 2: array of 2 pointers.
     |   |
     |   `-> [4,ptr] # var dim: shape 4, pointer to the data.
     |           |
     |           `-> [4.0,5.0,6.0,7.0]
     |
     `-> [3,ptr] | var dim, shape 3, pointer to the data.  
             |
             `-> [1.0,2.0,3.0]



Advantages
----------

   - Extremely flexible. Suppose that arrays a=[1,2,...,1000000]
     and b=[-1,-2,...,2000000] exist.  Perhaps they are columns
     that have already been extracted from a PostgreSQL data set.

     Now one can put these into a new typed array [a,b] without
     copying any data.

     It is always possible to build array trees bottom-up.

     Intuitively, it seems like the right thing for Blaze-like
     datasets.

   - Subarrays naturally return new array views with the correct type.
     This is very important for composing gufuncs.

        Example:   g : 10 * 2 * int -> 2 * int
                   f : 2 * int -> float64

        f(g(x)) is easy[1]: g returns an array view with the correct
        type and memory location so f can be applied directly without
        *any* adjustments to the type or the array.

        [1] in terms of typing ...

Disadvantages
-------------

    - Java and OCaml have state-of-the-art garbage collectors that
      make this sort of thing easier.  However, we're generally
      dealing with array views.

    - Pointers need to be adjusted when copying or storing arrays.


# ===========================================================================
#                          Offset-based ragged arrays
# ===========================================================================

The pointers in the last example are replaced by offsets that would probably
be stored directly in the dimensions.


Example (still need to work out the details)
--------------------------------------------

  type: "2 * 2 * var(2,1,1,3) * float64"
  data: [[[1.0, 2.0],
          [3.0]],
         [[4.0],
          [5.0, 6.0, 7.0]]]


   [0]        # fixed dim, single offset
   [0,24]     # fixed dim, two offsets
   [0,16,0,8] # var dim, four offsets

   [1.0,2.0,3.0,4.0,5.0,6.0,7.0] # data in one block


Advantages
----------

    - Single contiguous block that contains all data.

    - No pointer adjustments when copying.


Disadvantages
-------------

     - Composing arrays bottom-up would require copying (see the example
       above), a new allocation and type adjustment.

     - Subarrays would not naturally return the correct type. It would
       probably require adjustments (still have to work out the example,
       but I think array views are considerably harder).



# ===========================================================================
#                              Python specific
# ===========================================================================

The luxury version in terms of memory management would be to use the
pointer based representation and make fixed-dim and var-dim Python objects.


Advantages
----------

    - Memory management problems go away.

    - Arrays are naturally composable like in the first example.

    - Probably decent performance *for large columns in the last dimension*.


Disadvantages
-------------

     - Python specific.

     - Would need at least an additional refcount field in all first
       dimension elements (but not in the last contiguous ones that
       contain the actual data).

     - Huge overhead for "1000000 * 2 * float64" type data.
