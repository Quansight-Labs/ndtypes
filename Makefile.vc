
# ======================================================================
#                Visual C (nmake) Makefile for libndtypes
# ======================================================================

LIBSTATIC = libndtypes.lib

!if "$(DEBUG)" == "1"
OPT = /MDd /Od /Zi
!else
OPT = /MD /Ox /GS /EHsc
!endif

CFLAGS = /W4 /wd4200 /wd4201 /wd4204 /nologo $(OPT)
CFLAGS_FOR_GENERATED = /W4 /wd4201 /wd4244 /wd4267 /wd4702 /wd4127 /nologo /DYY_NO_UNISTD_H=1 /D__STDC_VERSION__=199901L $(OPT)
CFLAGS_FOR_PARSER = /W4 /wd4201 /wd4090 /nologo /DYY_NO_UNISTD_H=1 $(OPT)


default: $(LIBSTATIC)


OBJS = alloc.obj attr.obj display.obj equal.obj grammar.obj lexer.obj match.obj \
       ndtypes.obj parsefuncs.obj parser.obj seq.obj symtable.obj

$(LIBSTATIC):\
Makefile $(OBJS)
	-@if exist $@ del $(LIBSTATIC)
	lib $(LFLAGS) /out:$(LIBSTATIC) $(OBJS)

alloc.obj:\
Makefile alloc.c ndtypes.h
	$(CC) $(CFLAGS) -c alloc.c

attr.obj:\
Makefile attr.c attr.h ndtypes.h
	$(CC) $(CFLAGS) -c attr.c

display.obj:\
Makefile display.c ndtypes.h
        $(CC) $(CFLAGS) -c display.c

equal.obj:\
Makefile equal.c ndtypes.h
        $(CC) $(CFLAGS) -c equal.c

grammar.obj:\
Makefile grammar.c grammar.h lexer.h ndtypes.h parsefuncs.h seq.h
	$(CC) $(CFLAGS_FOR_GENERATED) -c grammar.c

lexer.obj:\
Makefile lexer.c grammar.h lexer.h parsefuncs.h
	$(CC) $(CFLAGS_FOR_GENERATED) -c lexer.c

match.obj:\
Makefile match.c ndtypes.h symtable.h
       $(CC) $(CFLAGS) -c match.c

ndtypes.obj:\
Makefile ndtypes.c ndtypes.h
	$(CC) $(CFLAGS) -c ndtypes.c

parsefuncs.obj:\
Makefile parsefuncs.c ndtypes.h parsefuncs.h seq.h
	$(CC) $(CFLAGS) -c parsefuncs.c

parser.obj:\
Makefile parser.c grammar.h lexer.h ndtypes.h seq.h
	$(CC) $(CFLAGS_FOR_PARSER) -c parser.c

seq.obj:\
Makefile seq.c ndtypes.h seq.h
	$(CC) $(CFLAGS) -c seq.c

symtable.obj:\
Makefile symtable.c ndtypes.h symtable.h
        $(CC) $(CFLAGS) -c symtable.c


# Tests
runtest:\
Makefile tests\runtest.c tests\alloc_fail.c tests\test_parse.c tests\test_parse_error.c \
tests\test_parse_roundtrip.c tests\test_indent.c tests\test_typedef.c tests\test_match.c \
ndtypes.h tests\test.h tests\alloc_fail.h $(LIBSTATIC)
	$(CC) -I. $(CFLAGS) -DTEST_ALLOC /Fetests\runtest.exe tests\runtest.c \
            tests\alloc_fail.c tests\test_parse.c tests\test_parse_error.c \
            tests\test_parse_roundtrip.c tests\test_indent.c tests\test_typedef.c \
            tests\test_match.c \
            $(LIBSTATIC)

check:\
Makefile runtest
	.\tests\runtest.exe


# Benchmark
bench:\
Makefile tools\bench.c ndtypes.h $(LIBSTATIC)
	$(CC) $(CFLAGS) /Febench.exe tools\bench.c $(LIBSTATIC)


# Print the AST
print_ast:\
Makefile tools\print_ast.c ndtypes.h $(LIBSTATIC)
	$(CC) $(CFLAGS) -o print_ast tools\print_ast.c $(LIBSTATIC)


# Parse a file that contains a datashape type
indent:\
Makefile indent.c ndtypes.h $(LIBSTATIC)
	$(CC) $(CFLAGS) /Feindent tools\indent.c $(LIBSTATIC)


clean: FORCE
	del /Q /F *.obj bench.exe indent.exe print_ast.exe tests\runtest.exe $(LIBSTATIC)


FORCE:


